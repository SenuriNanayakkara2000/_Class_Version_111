Index: w1901982/src/main/java/com/example/w1901982/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.w1901982;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\nimport static javafx.application.Application.launch;\r\n\r\n\r\npublic class Main extends Application {\r\n    static int fullFuelStock = 6600;\r\n    static int income;\r\n    static Scanner input = new Scanner(System.in);\r\n    static FuelQueue[][] queue = new FuelQueue[5][6];\r\n\r\n    static FuelQueue customer = new FuelQueue();\r\n\r\n    public static void main(String[] args) {\r\n\r\n        System.out.println(\"\"\"\r\n                Filling Station\r\n                -------------------------------------------------------------------\r\n                100 or VFQ => View all Fuel Queues.\r\n                101 or VEQ => View all Empty Queues.\r\n                102 or ACQ => Add customer to a Queue.\r\n                103 or RCQ => Remove a customer from a Queue.\r\n                104 or PCQ => Remove a served customer.\r\n                105 or VCS => View Customers Sorted in alphabetical order.\r\n                106 or SPD => Store Program Data into file.\r\n                107 or LPD => Load Program Data from file.\r\n                108 or STK => View Remaining Fuel Stock.\r\n                109 or AFS => Add Fuel Stock.\r\n                110 or IFQ => Income of the Queue;\r\n                111 or GUI => Load GUI\r\n                999 or EXT => Exit the Program.\r\n                -------------------------------------------------------------------\r\n                \"\"\");\r\n\r\n        while (true) {\r\n            System.out.println(\"Enter the Option:\");\r\n            String Option = input.next();\r\n\r\n            if (Option.equals(\"100\") || Option.equalsIgnoreCase(\"VFQ\")) { // view all fuel queues\r\n                view();\r\n            }\r\n            if (Option.equals(\"101\") || Option.equalsIgnoreCase(\"VEQ\")) {  // view all empty queues\r\n                q_empty();\r\n            }\r\n            if (Option.equals(\"102\") || Option.equalsIgnoreCase(\"ACQ\")) {  // add customers to queues\r\n                addCustomer();\r\n            }\r\n            if (Option.equals(\"103\") || Option.equalsIgnoreCase(\"RCQ\")) {  // remove customer from queue\r\n                removeCustomer();\r\n            }\r\n            if (Option.equals(\"104\") || Option.equalsIgnoreCase(\"PCQ\")) {  // remove reserved customer from queues\r\n                removeSerCustomer();\r\n            }\r\n            if (Option.equals(\"105\") || Option.equalsIgnoreCase(\"VCS\")) {  // View Customers Sorted in alphabetical order\r\n                viewCustomerInAl_Order();\r\n            }\r\n            if (Option.equals(\"106\") || Option.equalsIgnoreCase(\"SPD\")) {  // Store Program Data into file.\r\n                storeData();\r\n            }\r\n            if (Option.equals(\"107\") || Option.equalsIgnoreCase(\"LPD\")) {  // Load Program Data from file.\r\n                loadData();\r\n            }\r\n            if (Option.equals(\"108\") || Option.equalsIgnoreCase(\"STK\")) {  // View Remaining Fuel Stock.\r\n                remainingStock();\r\n            }\r\n            if (Option.equals(\"109\") || Option.equalsIgnoreCase(\"AFS\")) {  // Add Fuel Stock\r\n                addFuelStock();\r\n            }\r\n            if (Option.equals(\"110\") || Option.equalsIgnoreCase(\"IFQ\")) {  //Income of the fuel Queue\r\n                income();\r\n            }\r\n            if (Option.equals(\"111\") || Option.equalsIgnoreCase(\"GUI\")) {  //GUI for the fuel Queue\r\n                gui();\r\n            }\r\n            if (Option.equals(\"999\") || Option.equalsIgnoreCase(\"EXT\")) {  //Exit the Program\r\n                exit();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private static void gui() { //method to load GUI. If there is no gui it throws exception as no GUI\r\n        try {\r\n            launch();\r\n        }catch (Exception exception){\r\n            System.out.println(\"No any GUI\");\r\n        }\r\n    }\r\n    @Override\r\n    public void start(Stage stage) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(Main.class.getResource(\"main-view.fxml\"));\r\n        Scene scene = new Scene(fxmlLoader.load());\r\n        stage.setTitle(\"Fuel Queue Management\");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n        /*Override start method.create new object from FXMLLoader and create object\r\n        called scene and set the scene and load that UI*/\r\n    }\r\n\r\n    static void q_empty() {   // view all empty queues\r\n        for (int i = 0; i < 5; i++) {\r\n            if (queue[i][0] == null) {\r\n                System.out.println(\"Line number \" + (i + 1) + \" is still empty\");\r\n            } else {\r\n                System.out.println(\"Line number \" + (i + 1) + \" is not empty\");\r\n            }\r\n        }\r\n        /*check that specific position is empty or not and\r\n        In here it is run until all positions get filled  in each row.*/\r\n    }\r\n\r\n    static void view() {    // view all fuel queues\r\n        System.out.println(\"These are the Queues\");\r\n        for (int i = 0; i < 5; i++) {\r\n            System.out.println(\"Queue No:\" + (i + 1));\r\n            for (int j = 0; j < 6; j++) {\r\n                if (queue[i][j] == null) {\r\n                    System.out.println(\"empty\");\r\n                }\r\n                else {\r\n                    System.out.println(\"Already occupied\");\r\n                }\r\n                /*five fuel queues with 6 customers for each. print Queue no by adding one to the index.*/\r\n            }\r\n        }\r\n    }\r\n\r\n    static void income() {      //income of the queue.\r\n        System.out.println(\"Income  \"+income);\r\n    }\r\n\r\n    static void exit() {\r\n        System.out.println(\"Thank you!!!\"); //to exit from the programme\r\n        System.exit(0);\r\n    }\r\n\r\n    static void addFuelStock() {        //add new fuel stock to current stock and print new stock\r\n        System.out.println(\"Amount of fuel in liters added:  \");\r\n        int newFuelStock=input.nextInt();\r\n        fullFuelStock+=newFuelStock; //take new variable and add full stock availble in current situation.\r\n        System.out.println(\"New fuel Stock\"+\" \"+fullFuelStock);\r\n\r\n    }\r\n\r\n    static void remainingStock() {      //prints remaining stock after serve for customers\r\n        System.out.println(\"Remaining Stock\"+\" \"+fullFuelStock);\r\n    }\r\n\r\n    static void loadData() {        //load data to the text file called fuel_Queue_Details\r\n        try{\r\n            File txt = new File(\"fuel_Queue_Details.txt\");\r\n            Scanner read = new Scanner(txt);\r\n            for(int i = 0; i < 5; i++){         //looping for 30 positions\r\n                for(int j = 0; j < 6; j++){\r\n                    if(read.hasNextLine()){\r\n                        String readingLine = read.nextLine();\r\n                        if( readingLine.equals(\"null\")){\r\n                            queue[i][j] = null;             //If there is empty record, null is assign to it\r\n                        }\r\n                        else {\r\n                            queue[i][j] = new FuelQueue();\r\n                            queue[i][j].passenger.setFirstName(readingLine);      //take the passenger details from line by line.\r\n                            queue[i][j].passenger.setSecondName(read.nextLine());\r\n                            queue[i][j].passenger.setVehicleNo(read.nextLine());\r\n                            queue[i][j].passenger.setLitersRequired(Integer.parseInt(read.nextLine()));\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            read.close();\r\n            System.out.println(\"Data loaded successful.\");\r\n        }\r\n        catch(IOException e){\r\n            System.out.println(\"File cannot be found.\");\r\n        }\r\n        /*make new object as File and naming as txt.after taking details, it will call  close() method. If data loaded successfully, It prints Data loaded successfully\r\n        * and if not it prints file can not be found */\r\n    }\r\n\r\n\r\n    static void storeData() {\r\n        try{\r\n            FileWriter writer = new FileWriter(\"fuel_Details.txt\");     //store data into text file\r\n            for (int i = 0; i < 3; i++) {\r\n                for (int j = 0; j < 6; j++) {\r\n                    if (queue[i][j]==null) {\r\n                        writer.write(\"null\");\r\n                    }\r\n                    /*looping for 30 occurences. If one record is null, it takes only one line and if it is not null it prints customer details.\r\n                    * fro one customer , it takes four lines */\r\n                    else {\r\n                        writer.write(queue[i][j].passenger.getFirstName() + \"\\n\");\r\n                        writer.write(queue[i][j].passenger.getSecondName() + \"\\n\");\r\n                        writer.write(queue[i][j].passenger.getVehicleNo() + \"\\n\");\r\n                        writer.write(queue[i][j].passenger.getLitersRequired() + \"\\n\");\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n            writer.close();\r\n            System.out.println(\"Data was successfully stored\");\r\n        }\r\n        catch (IOException e){\r\n            System.out.println(\"Data couldn't be stored.\");\r\n        }\r\n        /*make new object as File and naming as txt.after taking details, it will call  close() method. If data loaded successfully, It prints Data loaded successfully\r\n         * and if not it prints file can not be found */\r\n    }\r\n\r\n    static void viewCustomerInAl_Order() {\r\n        FuelQueue[][] customerOrder = new FuelQueue[5][6];      //make new array called customerOrder\r\n        for (int i = 0; i < 5; i++) {\r\n            for (int j = 0; j < 6; j++) {\r\n                customerOrder[i][j] = queue[i][j];      //current array assign to new array called customerOrder\r\n                if (customerOrder[i][j] == null) {\r\n                    customerOrder[i][j] = new FuelQueue();\r\n                    customerOrder[i][j].passenger.setFirstName(\"empty\");\r\n                }\r\n                /*If */\r\n            }\r\n        }\r\n        for (int i = 0; i < 5; i++) {\r\n            for (int j = 0; j < 6; j++) {\r\n                for (int x = 1; x < 6 - j; x++) {\r\n                    if ((customerOrder[i][x - 1].passenger.getFirstName().compareToIgnoreCase(customerOrder[i][x].passenger.getFirstName())) > 0) {\r\n                        FuelQueue tempElement = customerOrder[i][x - 1];\r\n                        customerOrder[i][x - 1] = customerOrder[i][x];\r\n                        customerOrder[i][x] = tempElement;\r\n                    }\r\n                }\r\n                /*Sorted using bubble sort.*/\r\n            }\r\n        }\r\n        System.out.println(\"The sorted queue is viewed below\");\r\n        for (int i = 0; i < 5; i++) {\r\n            System.out.println(\"Queue \" + (i + 1));\r\n            for (int j = 0; j < 6; j++) {\r\n                if (customerOrder[i][j].passenger.getFirstName().equals(\"empty\")) {\r\n                    System.out.println(\"still empty\");\r\n                    /*If the first name equals empty, it prints that position is empty*/\r\n                } else {\r\n                    System.out.println(customerOrder[i][j].passenger.getFirstName());\r\n                }\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    static void removeSerCustomer() {\r\n        System.out.print(\"Enter Queue number: \");\r\n        int que_Num = input.nextInt();\r\n        System.out.println(\"Served Customer removed from the queue\");\r\n        queue[que_Num - 1][0] = null;\r\n        fullFuelStock -=10;\r\n        System.out.println(fullFuelStock+\" \");\r\n        for (int i = 1; i < 6; i++) {\r\n            if (queue[que_Num - 1][i - 1] == null) {\r\n                queue[que_Num - 1][i - 1] = queue[que_Num - 1][i];\r\n                queue[que_Num - 1][i] = null;\r\n            }\r\n            /*If queue number -1 and i-1 equals to null.when front customer removed, next customer goes to front place.\r\n        Then next iteration null assigned to person in next position.In here fuel stock also get reduce */\r\n        }\r\n        for (int i = 0; i < 6; i++){\r\n            if(queue[que_Num - 1][i] == null){\r\n                queue[que_Num - 1][i] = customer.deQueue();\r\n            }\r\n        }\r\n         /*If one position get blanked in the queue, it filled by customer in waiting list.So deQueue from waiting list*/\r\n\r\n    }\r\n\r\n    static void removeCustomer() {\r\n        System.out.print(\"Enter Queue number: \");\r\n        int que_Num = input.nextInt();\r\n        int posNum;\r\n        System.out.print(\"Enter the position number: \");\r\n        posNum = input.nextInt();\r\n        /*customer can enter queue number and position in that queue.*/\r\n        queue[que_Num - 1][posNum - 1] = null;\r\n        System.out.println(\"Customer is removed from the queue\");\r\n        fullFuelStock +=10;\r\n        System.out.println(fullFuelStock+\"\\n \");\r\n        /*when customer removed fuel stock get increase by 10  */\r\n        for(int i = posNum; i< 6;i++)\r\n\r\n        {\r\n            if (queue[que_Num - 1][i - 1] == null) {\r\n                queue[que_Num - 1][i - 1] = queue[que_Num - 1][i];\r\n                queue[que_Num - 1][i] = null;\r\n            }\r\n        /*If queue number -1 and i-1 equals to null.when front customer removed, next customer goes to front place.\r\n        Then next iteration null assigned to person in next position.*/\r\n\r\n        }\r\n        for (int i = 0; i < 6; i++){\r\n            if(queue[que_Num - 1][i] == null){\r\n                queue[que_Num - 1][i] = customer.deQueue();\r\n            }\r\n        }\r\n        /*If one position get blanked in the queue, it filled by customer in waiting list.So deQueue from waiting list*/\r\n    }\r\n\r\n    static void addCustomer() {\r\n        if (fullFuelStock <= 500) {\r\n            System.out.println(\"Warning! Fuel Stock is low \" + fullFuelStock);\r\n            /*gave the warning when full stock get decrease more than the 500*/\r\n        }\r\n        int maxSpaces = 0;\r\n        int queueNumber = minQueue();\r\n        for (int i = 0; i < 5; i++) {\r\n            for (int j = 0; j < 6; j++) {\r\n                if (queue[i][j] != null) {\r\n                    maxSpaces += 1;\r\n                }\r\n            }\r\n        }\r\n        /*take the variable as maxSpaces. then take the queue number by minQueue() method.\r\n        * If position is not null maxSpaces increament by 1*/\r\n        if (maxSpaces==30) {\r\n            System.out.println(\"The Queues are full\\nSo you have to wait in waiting queue\");\r\n            System.out.print(\"Enter the Customer's First Name: \");\r\n            customer.passenger.setFirstName(input.next());\r\n            System.out.print(\"Enter the Customer's Last Name: \");\r\n            customer.passenger.setSecondName(input.next());\r\n            System.out.print(\"Enter the Vehicle Number: \");\r\n            customer.passenger.setVehicleNo(input.next());\r\n            System.out.print(\"Enter the No.of Litres: \");\r\n            customer.passenger.setLitersRequired(input.nextInt());\r\n            customer.enQueue(customer);\r\n            /*when maxSpaces equals to 30, customers will goes to waiting list.*/\r\n        } else {\r\n            System.out.print(\"Enter the Customer's First Name: \");\r\n            String firstName = input.next();\r\n            firstName = firstName.substring(0, 1).toUpperCase() + firstName.substring(1).toLowerCase();\r\n            System.out.print(\"Enter the Customer's Last Name: \");\r\n            String secondName = input.next();\r\n            secondName = secondName.substring(0, 1).toUpperCase() + secondName.substring(1).toLowerCase();\r\n            System.out.print(\"Enter the Vehicle Number: \");\r\n            String vehicleNumber = input.next();\r\n            System.out.print(\"Enter the No.of Litres: (only from number)\");\r\n            int litersRequired = input.nextInt();\r\n            /*Until maxSpaces get into 30, customers enter to the queues.*/\r\n            for (int j = 0; j < 6; j++) {\r\n                if (queue[queueNumber][j] == null) {\r\n                    queue[queueNumber][j] = new FuelQueue();\r\n                    queue[queueNumber][j].passenger.setFirstName(firstName);\r\n                    queue[queueNumber][j].passenger.setSecondName(secondName);\r\n                    queue[queueNumber][j].passenger.setVehicleNo(vehicleNumber);\r\n                    queue[queueNumber][j].passenger.setLitersRequired(litersRequired);\r\n                    /*take the customer details from passenger class, if the position is empty.*/\r\n                    fullFuelStock -= litersRequired;\r\n                    income = income + (litersRequired * 430);\r\n                    /*updated fuel stock and income*/\r\n                    System.out.println(\"\\n\" + firstName + \" \" + secondName + \" added to the queue \" + (queueNumber + 1) + \" successfully\");\r\n                    System.out.println(income);\r\n                    System.out.println(fullFuelStock);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static int minQueue() {\r\n        int maxCount = 6;\r\n        int minimumQueueNo = 0;\r\n        for (int i=0;i<5;i++)\r\n        {\r\n            int count = 0;\r\n            for (int j=0;j<6;j++)\r\n            {\r\n                if (queue[i][j] != null)\r\n                {\r\n                    count ++;\r\n                }\r\n            }\r\n            if (count<maxCount)\r\n            {\r\n                maxCount = count;\r\n                minimumQueueNo = i ;\r\n            }\r\n        }\r\n        return minimumQueueNo;\r\n    }\r\n    /*getting the queue with maximum spaces.*/\r\n    /*start from first queue to enter customers and it goes to 2,3,4,5 in order\r\n    * first enter customers to first index */\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/w1901982/src/main/java/com/example/w1901982/Main.java b/w1901982/src/main/java/com/example/w1901982/Main.java
--- a/w1901982/src/main/java/com/example/w1901982/Main.java	(revision f8dd414779bc404c35e4d05249a3e02520e87ad0)
+++ b/w1901982/src/main/java/com/example/w1901982/Main.java	(date 1661194014743)
@@ -111,7 +111,7 @@
     static void q_empty() {   // view all empty queues
         for (int i = 0; i < 5; i++) {
             if (queue[i][0] == null) {
-                System.out.println("Line number " + (i + 1) + " is still empty");
+                System.out.println("Line number " + (i + 1) + " is still emptyyyyyy");
             } else {
                 System.out.println("Line number " + (i + 1) + " is not empty");
             }
